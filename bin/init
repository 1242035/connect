#!/usr/bin/env node

/**
 * Dependencies
 */

var async = require('async')
  , server = require('../server')
  , Role  = require('../models/Role')
  , Scope = require('../models/Scope')
  , Client = require('../models/Client')
  , ClientToken = require('../models/ClientToken')
  ;


/**
 * Data
 */

var defaultRoles = [
  { name: 'authority' },
  { name: 'developer' }
];

var defaultScopes = [
  { name: 'openid',   description: 'View your identity' },
  { name: 'profile',  description: 'View your basic account info' },
  { name: 'client',   description: 'Register and configure clients' },
  { name: 'realm',    description: 'Configure the security realm' }
];

var defaultRoleScopes = [
  ['authority', 'realm'],
  ['developer', 'client']
];

var defaultClients = [
  { client_name: 'Anvil Connect Authority', redirect_uris: ['http://127.0.0.1/callback'], trusted: 'true' },
  { client_name: 'Anvil Connect Developer', redirect_uris: ['http://127.0.0.1/callback'], trusted: 'true' },
  { client_name: 'Anvil Connect Account',   redirect_uris: ['http://127.0.0.1/callback'], trusted: 'true' }
];

/**
 * Persist
 */

function insertRoles (done) {
  async.map(defaultRoles, function (role, callback) {
    Role.insert(role, function (err, instance) {
      callback(err, instance);
    })
  }, function (err, roles) {
    console.log('Created default roles.');
    done(err, roles);
  });
}

function insertScopes (done) {
  async.map(defaultScopes, function (scope, callback) {
    Scope.insert(scope, function (err, instance) {
      callback(err, instance);
    })
  }, function (err, scopes) {
    console.log('Created default scopes.');
    done(err, scopes);
  });
}

function assignScopesToRoles (done) {
  async.map(defaultRoleScopes, function (pair, callback) {
    Role.addScopes(pair[0], pair[1], function (err, result) {
      callback(err, result);
    });
  }, function (err, results) {
    console.log('Created default role scope assignments.');
    done(err, results);
  })
}

function insertClients (done) {
  async.map(defaultClients, function (client, callback) {
    Client.insert(client, function (err, instance) {
      if (err) { return callback(err); }

      ClientToken.issue({
        iss: server.settings.issuer,
        sub: instance._id,
        aud: instance._id
      }, server.settings.privateKey, function (err, token) {
        if (err) { return callback(err); }
        console.log('Created ' + instance.client_name);
        console.log(instance.configuration(server, token));
        callback(null, instance);
      });

    });

  }, function (err, scopes) {
    console.log('Created default clients.');
    done(err, scopes);
  });
}

async.parallel([
  insertRoles,
  insertScopes,
  assignScopesToRoles,
  insertClients
], function (err, results) {
  console.log('Ready to run.');
  process.exit();
});
